/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;

/**
 * FXML Controller class
 *
 * @author Mike Bliss
 */
public class AddPartMenuController implements Initializable {

    
    Stage stage;
    Parent scene;
    
    
    
     @FXML
    private RadioButton inHouseRbtn;

    @FXML
    private ToggleGroup radioTG;

    @FXML
    private RadioButton outsourcedRbtn;

    @FXML
    private TextField addPartIdTxt;

    @FXML
    private TextField addPartNameTxt;

    @FXML
    private TextField addPartInvTxt;

    @FXML
    private TextField addPartPriceTxt;

    @FXML
    private TextField addPartMaxTxt;

    @FXML
    private TextField addPartMachineIdTxt;

    @FXML
    private TextField addPartMinTxt;

    @FXML
    private Button addPartSaveBtn;

    @FXML
    private Button addPartCancelBtn;
    
    @FXML
    private Label addPartSourceLabel;
    
    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
    } 
    

    /**
     * onAction for the save button on the add part menu.
     * @param event An event object.
     * @throws IOException Handles input/output exceptions.
     */
    @FXML
    void onActionAddPartSave(ActionEvent event) throws IOException {
        
        try{
        /*
         * Enhanced for loop is best for lists
         * This for loop counts the number of items in
         * in the ObservableList<Part> list to determine an
         * index to be used to an autogenerated part id
         */

        int count= 0;
        for(Part index : Inventory.getAllParts()) {
            count++;
        }

        /**
         * This line was corrected to fix an off-by-one error in the part id
         * of the add part screen, which resulted in 2 parts of the same id. 
         */
        int id = count + 1;
        String name = addPartNameTxt.getText();
        double price = Double.parseDouble(addPartPriceTxt.getText());
        int stock = Integer.parseInt(addPartInvTxt.getText());
        int min = Integer.parseInt(addPartMinTxt.getText());
        int max = Integer.parseInt(addPartMaxTxt.getText());
        
        if(min > max) {
            Alert error = new Alert(Alert.AlertType.ERROR);
            error.setTitle("Oops!");
            error.setContentText("Min cannot be greater than max.");
            Optional<ButtonType> error1 = error.showAndWait();
        } else if (min > stock) {
            Alert error = new Alert(Alert.AlertType.ERROR);
            error.setTitle("Oops!");
            error.setContentText("Stock must be greater than or equal to min.");
            Optional<ButtonType> error2 = error.showAndWait();
        } else if(stock > max) {
            Alert error = new Alert(Alert.AlertType.ERROR);
            error.setTitle("Oops!");
            error.setContentText("Stock must be less than or equal to max.");
            Optional<ButtonType> error3 = error.showAndWait();
        } else if(inHouseRbtn.isSelected()) {
            int machineId = Integer.parseInt(addPartMachineIdTxt.getText());
            Inventory.addPart(new InHouse(id, name, price, stock, min, max, machineId));
            changeScreen(event, "/view/Main.fxml");
        } else if (outsourcedRbtn.isSelected()) {
            String machineId = addPartMachineIdTxt.getText();
            Inventory.addPart(new Outsourced(id, name, price, stock, min, max, machineId));
            changeScreen(event, "/view/Main.fxml");
        }
        }catch(NumberFormatException e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Input Error");
            alert.setContentText("Please enter information in the correct format.");
            Optional<ButtonType> result = alert.showAndWait();
        }
        
    }

    /**
     * onAction for the InHouse radio button on the add part menu.
     * @param event An event object.
     */
    @FXML
    void onActionInHouseRadio(ActionEvent event) {
        // This line should change the label to match the class type
        addPartSourceLabel.setText("Machine ID");
    }

    /**
     * onAction for the Outsourced radio button.
     * @param event An event object.
     */
    @FXML
    void onActionOutsourcedRadio(ActionEvent event) {
        // This line should change the label to match the class type
        addPartSourceLabel.setText("Company Name");
    }

    /**
     * onAction for the cancel button on the add part menu. 
     * Returns user to the main menu.
     * @param event An event object.
     * @throws IOException Handles input/output exceptions.
     */
    @FXML
    void onActionAddPartCancel (ActionEvent event) throws IOException {
        changeScreen(event, "/view/Main.fxml");
    }
    
    /**
     * Redirects user from current screen to specified screen. 
     * Created to avoid redundant code.
     * @param event An event object.
     * @param path Destination for screen redirect.
     * @throws IOException Handles input/output exceptions.
     */
    void changeScreen(ActionEvent event, String path) throws IOException {
        stage = (Stage)((Button)event.getSource()).getScene().getWindow(); 
        scene = FXMLLoader.load(getClass().getResource(path));
        stage.setScene(new Scene(scene));
        stage.show();
    }
}
